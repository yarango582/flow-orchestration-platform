openapi: 3.0.3
info:
  title: Flow Management Service API
  description: |
    Servicio encargado de la gestión completa de flujos de trabajo del Scheduler-Engine.
    Proporciona funcionalidades CRUD para flujos, versionado, rollback y validación de compatibilidad.
  version: 0.1.0
  contact:
    name: Backend-Guru
    email: backend@scheduler-engine.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3001
    description: Desarrollo local
  - url: https://api-dev.scheduler-engine.com
    description: Entorno de desarrollo
  - url: https://api.scheduler-engine.com
    description: Producción

security:
  - BearerAuth: []

paths:
  /health:
    get:
      tags:
        - Health
      summary: Health check del servicio
      description: Verifica el estado del servicio y sus dependencias
      security: []
      responses:
        '200':
          description: Servicio operativo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'
              example:
                status: "healthy"
                timestamp: "2024-07-30T10:30:00Z"
                version: "0.1.0"
                dependencies:
                  database: "healthy"
                  redis: "healthy"

  /api/v1/flows:
    get:
      tags:
        - Flows
      summary: Obtener lista de flujos
      description: Retorna una lista paginada de flujos con filtros opcionales
      parameters:
        - name: page
          in: query
          description: Número de página (comenzando desde 1)
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Elementos por página
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: status
          in: query
          description: Filtrar por estado del flujo
          schema:
            $ref: '#/components/schemas/FlowStatus'
        - name: search
          in: query
          description: Búsqueda por nombre o descripción
          schema:
            type: string
            minLength: 2
        - name: version
          in: query
          description: Filtrar por versión específica
          schema:
            type: string
      responses:
        '200':
          description: Lista de flujos obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlowListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Flows
      summary: Crear nuevo flujo
      description: Crea un nuevo flujo de trabajo con validación de compatibilidad entre nodos
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFlowRequest'
            example:
              name: "Data Processing Pipeline"
              description: "Procesa datos de ventas diarias y genera reportes"
              nodes:
                - id: "node-1"
                  type: "sql-query"
                  version: "1.0.0"
                  config:
                    query: "SELECT * FROM sales WHERE date = CURRENT_DATE"
                    connection: "postgres-main"
                  position: { x: 100, y: 100 }
                - id: "node-2"
                  type: "filter"
                  version: "1.0.0"
                  config:
                    condition: "amount > 1000"
                  position: { x: 300, y: 100 }
                - id: "node-3"
                  type: "map"
                  version: "1.0.0"
                  config:
                    transformation: "{ id, amount, customer: customer_name }"
                  position: { x: 500, y: 100 }
                - id: "node-4"
                  type: "http-post"
                  version: "1.0.0"
                  config:
                    url: "https://api.reports.com/sales"
                    headers: { "Content-Type": "application/json" }
                  position: { x: 700, y: 100 }
              connections:
                - from: "node-1"
                  to: "node-2"
                  outputPort: "data"
                  inputPort: "input"
                - from: "node-2"
                  to: "node-3"
                  outputPort: "filtered"
                  inputPort: "input"
                - from: "node-3"
                  to: "node-4"
                  outputPort: "mapped"
                  inputPort: "data"
      responses:
        '201':
          description: Flujo creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flow'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/flows/{flowId}:
    get:
      tags:
        - Flows
      summary: Obtener flujo por ID
      description: Retorna los detalles completos de un flujo específico
      parameters:
        - name: flowId
          in: path
          required: true
          description: ID único del flujo
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Flujo encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flow'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Flows
      summary: Actualizar flujo completo
      description: Actualiza completamente un flujo existente creando nueva versión
      parameters:
        - name: flowId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFlowRequest'
      responses:
        '200':
          description: Flujo actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flow'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Flows
      summary: Eliminar flujo
      description: Elimina lógicamente un flujo (soft delete)
      parameters:
        - name: flowId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Flujo eliminado exitosamente
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: No se puede eliminar - flujo tiene ejecuciones activas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/flows/{flowId}/versions:
    get:
      tags:
        - Flow Versions
      summary: Obtener versiones del flujo
      description: Lista todas las versiones de un flujo específico
      parameters:
        - name: flowId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Lista de versiones
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FlowVersion'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/flows/{flowId}/rollback/{version}:
    post:
      tags:
        - Flow Versions
      summary: Rollback a versión anterior
      description: Revierte el flujo a una versión anterior específica
      parameters:
        - name: flowId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: version
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Rollback ejecutado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flow'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: No se puede hacer rollback - hay ejecuciones activas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/flows/{flowId}/validate:
    post:
      tags:
        - Flow Validation
      summary: Validar compatibilidad del flujo
      description: Valida que todos los nodos sean compatibles entre sí y las conexiones sean válidas
      parameters:
        - name: flowId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Validación completada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResult'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/flows/{flowId}/status:
    patch:
      tags:
        - Flows
      summary: Cambiar estado del flujo
      description: Activa, desactiva o pausa un flujo
      parameters:
        - name: flowId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  $ref: '#/components/schemas/FlowStatus'
              example:
                status: "active"
      responses:
        '200':
          description: Estado actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flow'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    HealthCheck:
      type: object
      required:
        - status
        - timestamp
        - version
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        timestamp:
          type: string
          format: date-time
        version:
          type: string
        dependencies:
          type: object
          additionalProperties:
            type: string
            enum: [healthy, degraded, unhealthy]

    FlowStatus:
      type: string
      enum: [draft, active, inactive, paused, archived]
      description: |
        - draft: Flujo en desarrollo
        - active: Flujo activo y disponible para ejecución
        - inactive: Flujo desactivado temporalmente
        - paused: Flujo pausado (mantiene programaciones pero no ejecuta)
        - archived: Flujo archivado (solo lectura)

    NodePosition:
      type: object
      required:
        - x
        - y
      properties:
        x:
          type: number
        y:
          type: number

    NodeConnection:
      type: object
      required:
        - from
        - to
        - outputPort
        - inputPort
      properties:
        from:
          type: string
          description: ID del nodo origen
        to:
          type: string
          description: ID del nodo destino
        outputPort:
          type: string
          description: Puerto de salida del nodo origen
        inputPort:
          type: string
          description: Puerto de entrada del nodo destino

    NodeInstance:
      type: object
      required:
        - id
        - type
        - version
        - config
        - position
      properties:
        id:
          type: string
          description: ID único del nodo en el flujo
        type:
          type: string
          description: Tipo de nodo (sql-query, filter, map, http-post, etc.)
        version:
          type: string
          description: Versión del nodo
        config:
          type: object
          description: Configuración específica del nodo
          additionalProperties: true
        position:
          $ref: '#/components/schemas/NodePosition'

    Flow:
      type: object
      required:
        - id
        - name
        - status
        - version
        - nodes
        - connections
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          maxLength: 1000
        status:
          $ref: '#/components/schemas/FlowStatus'
        version:
          type: string
          pattern: '^\d+\.\d+\.\d+$'
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/NodeInstance'
          minItems: 1
        connections:
          type: array
          items:
            $ref: '#/components/schemas/NodeConnection'
        metadata:
          type: object
          additionalProperties: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        createdBy:
          type: string
        tags:
          type: array
          items:
            type: string

    CreateFlowRequest:
      type: object
      required:
        - name
        - nodes
        - connections
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          maxLength: 1000
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/NodeInstance'
          minItems: 1
        connections:
          type: array
          items:
            $ref: '#/components/schemas/NodeConnection'
        metadata:
          type: object
          additionalProperties: true
        tags:
          type: array
          items:
            type: string

    UpdateFlowRequest:
      type: object
      required:
        - name
        - nodes
        - connections
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          maxLength: 1000
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/NodeInstance'
          minItems: 1
        connections:
          type: array
          items:
            $ref: '#/components/schemas/NodeConnection'
        metadata:
          type: object
          additionalProperties: true
        tags:
          type: array
          items:
            type: string

    FlowVersion:
      type: object
      required:
        - version
        - createdAt
        - createdBy
      properties:
        version:
          type: string
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        changes:
          type: string
        isCurrent:
          type: boolean

    ValidationResult:
      type: object
      required:
        - isValid
        - errors
        - warnings
      properties:
        isValid:
          type: boolean
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
        warnings:
          type: array
          items:
            $ref: '#/components/schemas/ValidationWarning'

    ValidationError:
      type: object
      required:
        - code
        - message
        - nodeId
      properties:
        code:
          type: string
        message:
          type: string
        nodeId:
          type: string
        details:
          type: object
          additionalProperties: true

    ValidationWarning:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string
        nodeId:
          type: string
        details:
          type: object
          additionalProperties: true

    FlowListResponse:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Flow'
        pagination:
          $ref: '#/components/schemas/PaginationMeta'

    PaginationMeta:
      type: object
      required:
        - page
        - limit
        - total
        - totalPages
      properties:
        page:
          type: integer
          minimum: 1
        limit:
          type: integer
          minimum: 1
        total:
          type: integer
          minimum: 0
        totalPages:
          type: integer
          minimum: 0
        hasNext:
          type: boolean
        hasPrev:
          type: boolean

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object
          additionalProperties: true
        timestamp:
          type: string
          format: date-time
        path:
          type: string

  responses:
    BadRequest:
      description: Solicitud inválida
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "VALIDATION_ERROR"
            message: "Los datos proporcionados no son válidos"
            details:
              field: "name"
              reason: "El nombre es requerido"
            timestamp: "2024-07-30T10:30:00Z"
            path: "/api/v1/flows"

    Unauthorized:
      description: No autorizado
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "UNAUTHORIZED"
            message: "Token de acceso requerido"
            timestamp: "2024-07-30T10:30:00Z"

    Forbidden:
      description: Acceso prohibido
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "FORBIDDEN"
            message: "No tienes permisos para acceder a este recurso"
            timestamp: "2024-07-30T10:30:00Z"

    NotFound:
      description: Recurso no encontrado
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "NOT_FOUND"
            message: "El flujo solicitado no existe"
            timestamp: "2024-07-30T10:30:00Z"

    Conflict:
      description: Conflicto con el estado actual del recurso
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "CONFLICT"
            message: "Ya existe un flujo con este nombre"
            timestamp: "2024-07-30T10:30:00Z"

    InternalServerError:
      description: Error interno del servidor
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "INTERNAL_ERROR"
            message: "Error interno del servidor"
            timestamp: "2024-07-30T10:30:00Z"